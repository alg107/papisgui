#!/usr/bin/env python3
import papis.api as p
import papis
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import clipboard

docs = []
headers = ["Author", "Title", "Year", "id"]
rows = []
texts = []

extra_windows = []

def load_texts(lib):
    global docs
    for j,i in enumerate(docs):
        fldr = i.get_main_folder()
        ftext = ""
        try:
            with open(f"{fldr}/text.txt", "r") as f:
                ftext = f.read()
        except:
            pass
        docs[j]['full_text'] = ftext

def load_docs(lib):
    global docs
    global rows
    docs = p.get_all_documents_in_lib(lib)
    rows = [(a['author'], a['title'], str(a['year'])+"    ", i) for i,a in enumerate(docs)]
    load_texts(lib)


load_docs(p.get_lib_name())

def docbyid(i):
    return docs[i]


class TableModel(QAbstractTableModel):
    def rowCount(self, parent):
        return len(rows)
    def columnCount(self, parent):
        return len(headers)
    def data(self, index, role):
        if role != Qt.DisplayRole:
            return QVariant()
        return rows[index.row()][index.column()]
    def headerData(self, section, orientation, role):
        if role != Qt.DisplayRole or orientation != Qt.Horizontal:
            return QVariant()
        return headers[section]

class FilMo(QSortFilterProxyModel):
    def filterAcceptsRow(self, srow, sparent):
        bigbool = False
        re = str(self.filterRegExp().pattern()).lower()
        for i, d in enumerate(headers[:-1]):
            colstr = str(self.sourceModel().index(srow,i).data()).lower()
            #print(re in colstr)
            bigbool = bigbool or (re in colstr)
        return bigbool

class FilMo2(QSortFilterProxyModel):
    def filterAcceptsRow(self, srow, sparent):
        re = str(self.filterRegExp().pattern()).lower()
        idd = self.sourceModel().index(srow,len(headers)-1).data()
        doc = docbyid(idd)
        return re in doc['full_text'].lower()

class ViewTree(QTreeWidget):
    def __init__(self, value):
        super().__init__()
        def fill_item(item, value):
            def new_item(parent, text, val=None):
                child = QTreeWidgetItem([text])
                fill_item(child, val)
                parent.addChild(child)
                child.setExpanded(True)
            if value is None: return
            elif isinstance(value, dict):
                for key, val in sorted(value.items()):
                    new_item(item, str(key), val)
            elif isinstance(value, (list, tuple)):
                for val in value:
                    text = (str(val) if not isinstance(val, (dict, list, tuple))
                            else '[%s]' % type(val).__name__)
                    new_item(item, text, val) 
            else:
                new_item(item, str(value))

        fill_item(self.invisibleRootItem(), value)


def click_row(e):
    sm = view.selectionModel()
    try:
        idx = sm.selectedRows()[0].row()
    except:
        return 
    idd = filtermodel.index(idx,len(headers)-1).data()
    doc = docbyid(idd)
    p.open_file(doc.get_files()[0])

def open_menu(pos):
    sm = view.selectionModel()
    #idxs = sm.selectedRows()[0].row()
    idxs = sm.selectedRows()
    docs = []
    for i in idxs:
        idx = i.row()
        idd = filtermodel.index(idx,len(headers)-1).data()
        doc = docbyid(idd)
        docs.append(doc)
    menu = QMenu()
    exportAction = menu.addAction("Export")
    propertiesAction = menu.addAction("Properties")
    action = menu.exec_(view.mapToGlobal(pos))
    if len(docs) == 0: return
    if action == exportAction:
        bibtex = papis.bibtex.exporter(docs)
        clipboard.copy(bibtex)
    elif action == propertiesAction:
        global extra_windows
        win = ViewTree(docs[0])
        extra_windows.append(win)
        extra_windows[-1].show()



app = QApplication([])
#window = QWidget()


def onkey2(e):
    if e.key() == Qt.Key_Return:
        view.setFocus(True)
        view.selectRow(0)
    QLineEdit.keyPressEvent(sbar2,e)
    txt = sbar2.text()
    filtermodel.setFilterFixedString(txt)
    n = filtermodel.rowCount()
    statusbar.showMessage(f"Row Count: {n}")

def onkey(e):
    if e.key() == Qt.Key_Return:
        view.setFocus(True)
        view.selectRow(0)
    QLineEdit.keyPressEvent(sbar,e)
    txt = sbar.text()
    interfiltermodel.setFilterFixedString(txt)
    n = filtermodel.rowCount()
    statusbar.showMessage(f"Row Count: {n}")

def onlibchange(e):
    model.beginResetModel()
    newlib = libpicker.currentText()
    load_docs(newlib)
    model.endResetModel()
    view.reset()
    n = filtermodel.rowCount()
    statusbar.showMessage(f"Row Count: {n}")

def onresize(e):
    view.setColumnWidth(0,int(view.width()/6.0))
    view.setColumnWidth(1,int(view.width()/3.0))
    view.setColumnWidth(2,int(view.width()/6.0))
    #QWidget.resizeEvent(e)


def tableKey(e):
    if view.hasFocus():
        if e.key() == Qt.Key_Return:
            click_row(e)
    e.accept()
    QTableView.keyPressEvent(view, e)

def generalkey(e):
    if e.modifiers() == Qt.ControlModifier:
        if e.key() == Qt.Key_L:
            sbar.setFocus(True)
        elif e.key() == Qt.Key_S:
            sbar2.setFocus(True)
        elif e.key() == Qt.Key_P:
            libpicker.showPopup()
    QWidget.keyPressEvent(qw, e)

mainlayout = QVBoxLayout()

model = TableModel()
view = QTableView()

sbar = QLineEdit()
sbar2 = QLineEdit()
sbar.setPlaceholderText("Search Metadata")
sbar2.setPlaceholderText("Search In")
libpicker = QComboBox()
libpicker.addItems(p.get_libraries())
libpicker.setCurrentText(p.get_lib_name())
libpicker.currentTextChanged.connect(onlibchange)
sbar.keyPressEvent = onkey
sbar2.keyPressEvent = onkey2
mainlayout.addWidget(libpicker)
mainlayout.addWidget(sbar)
mainlayout.addWidget(sbar2)
#filtermodel = QSortFilterProxyModel()
interfiltermodel = FilMo(None)
interfiltermodel.setSourceModel(model)
interfiltermodel.setFilterFixedString("")
#interfiltermodel.setFilterCaseSensitivity(Qt.CaseSensitivity.CaseInsensitive)
filtermodel = FilMo2(None)
filtermodel.setSourceModel(interfiltermodel)
filtermodel.setFilterFixedString("")

view.setSelectionBehavior(QAbstractItemView.SelectRows)
view.setModel(filtermodel)
view.verticalHeader().setSectionResizeMode(QHeaderView.Fixed)
view.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeToContents)
view.horizontalHeader().setSectionResizeMode(1, QHeaderView.Stretch)
view.horizontalHeader().setSectionResizeMode(0, QHeaderView.Fixed)
view.resizeEvent = lambda _: view.setColumnWidth(0,int(view.width()/4.0))
#view.horizontalHeader().setSectionResizeMode(QHeaderView.Fixed)
view.verticalHeader().setVisible(False)
view.setColumnHidden(len(headers)-1, True)
view.setContextMenuPolicy(Qt.CustomContextMenu)
view.customContextMenuRequested.connect(open_menu)
view.mouseDoubleClickEvent = click_row
view.keyPressEvent = tableKey
mainlayout.addWidget(view)

statusbar = QStatusBar()
n = filtermodel.rowCount()
statusbar.showMessage(f"Row Count: {n}")
mainlayout.addWidget(statusbar)


qw = QWidget()
qw.setLayout(mainlayout)
#qw.resizeEvent = onresize
qw.keyPressEvent = generalkey
qw.resize(1000,600)
qw.show()
sbar.setFocus()
app.exec_()
