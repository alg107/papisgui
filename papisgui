#!/usr/bin/env python3
import papis.api as p
import papis
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import clipboard

class Library:
    def __init__(self, names, headers, coltypes, colweights):
        self.headers = headers
        self.headers.append("id")

        self.names = names
        self.coltypes = coltypes
        self.colweights = colweights
        self.load_docs(p.get_lib_name())

        keys = set()
        for d in self.docs:
            keys.update(d.keys())
        self.keys = list(keys)

    def load_texts(self):
        for j,i in enumerate(self.docs):
            fldr = i.get_main_folder()
            ftext = ""
            try:
                with open(f"{fldr}/text.txt", "r") as f:
                    ftext = f.read()
            except:
                pass
            self.docs[j]['full_text'] = ftext

    def gen_row_tuple(self, i,a):
        t = []
        for j, h in enumerate(self.names):
            if h == 'year':
                t.append(str(a[h])+"     ")
            else:
                t.append(a[h])
        t.append(i)
        return tuple(t)

    def load_docs(self, lib):
        self.docs = p.get_all_documents_in_lib(lib)
        self.rows = [self.gen_row_tuple(i,a) for i,a in enumerate(self.docs)]
        self.load_texts()



headers = ["Author", "Title",  "Year"]
names = ['author', 'title', 'year']
coltypes = [QHeaderView.Fixed, QHeaderView.Stretch, QHeaderView.ResizeToContents]
colweights = [1,3,0]

extra_windows = []

lib = Library(names, headers, coltypes, colweights)

def docbyid(i):
    return lib.docs[i]


class TableModel(QAbstractTableModel):
    def rowCount(self, parent):
        return len(lib.rows)
    def columnCount(self, parent):
        return len(lib.headers)
    def data(self, index, role):
        if role != Qt.DisplayRole:
            return QVariant()
        return lib.rows[index.row()][index.column()]
    def headerData(self, section, orientation, role):
        if role != Qt.DisplayRole or orientation != Qt.Horizontal:
            return QVariant()
        return lib.headers[section]

class FilMo(QSortFilterProxyModel):
    def filterAcceptsRow(self, srow, sparent):
        bigbool = False
        re = str(self.filterRegExp().pattern()).lower()
        for i, d in enumerate(lib.headers[:-1]):
            colstr = str(self.sourceModel().index(srow,i).data()).lower()
            #print(re in colstr)
            bigbool = bigbool or (re in colstr)
        return bigbool

class FilMo2(QSortFilterProxyModel):
    def filterAcceptsRow(self, srow, sparent):
        re = str(self.filterRegExp().pattern()).lower()
        idd = self.sourceModel().index(srow,len(lib.headers)-1).data()
        doc = docbyid(idd)
        return re in doc['full_text'].lower()

class ViewTree(QTreeWidget):
    def __init__(self, value):
        super().__init__()
        def fill_item(item, value):
            def new_item(parent, text, val=None):
                child = QTreeWidgetItem([text])
                fill_item(child, val)
                parent.addChild(child)
                child.setExpanded(True)
            if value is None: return
            elif isinstance(value, dict):
                for key, val in sorted(value.items()):
                    new_item(item, str(key), val)
            elif isinstance(value, (list, tuple)):
                for val in value:
                    text = (str(val) if not isinstance(val, (dict, list, tuple))
                            else '[%s]' % type(val).__name__)
                    new_item(item, text, val) 
            else:
                new_item(item, str(value))

        fill_item(self.invisibleRootItem(), value)


def click_row(e):
    sm = view.selectionModel()
    try:
        idx = sm.selectedRows()[0].row()
    except:
        return 
    idd = filtermodel.index(idx,len(lib.headers)-1).data()
    doc = docbyid(idd)
    try:
        p.open_file(doc.get_files()[0])
    except:
        return

def open_menu(pos):
    sm = view.selectionModel()
    #idxs = sm.selectedRows()[0].row()
    idxs = sm.selectedRows()
    docs = []
    for i in idxs:
        idx = i.row()
        idd = filtermodel.index(idx,len(lib.headers)-1).data()
        doc = docbyid(idd)
        docs.append(doc)
    menu = QMenu()
    exportAction = menu.addAction("Export")
    propertiesAction = menu.addAction("Properties")
    action = menu.exec_(view.mapToGlobal(pos))
    if len(docs) == 0: return
    if action == exportAction:
        bibtex = papis.bibtex.exporter(docs)
        clipboard.copy(bibtex)
    elif action == propertiesAction:
        global extra_windows
        win = ViewTree(docs[0])
        extra_windows.append(win)
        extra_windows[-1].show()



app = QApplication([])
#window = QWidget()


def onkey2(e):
    if e.key() == Qt.Key_Return:
        view.setFocus(True)
        view.selectRow(0)
    QLineEdit.keyPressEvent(sbar2,e)
    txt = sbar2.text()
    filtermodel.setFilterFixedString(txt)
    n = filtermodel.rowCount()
    statusbar.showMessage(f"Row Count: {n}")

def onkey(e):
    if e.key() == Qt.Key_Return:
        view.setFocus(True)
        view.selectRow(0)
    QLineEdit.keyPressEvent(sbar,e)
    txt = sbar.text()
    interfiltermodel.setFilterFixedString(txt)
    n = filtermodel.rowCount()
    statusbar.showMessage(f"Row Count: {n}")

def onlibchange(e):
    model.beginResetModel()
    newlib = libpicker.currentText()
    lib.load_docs(newlib)
    model.endResetModel()
    view.reset()
    n = filtermodel.rowCount()
    statusbar.showMessage(f"Row Count: {n}")

def onresize(e):
    for j, h in enumerate(lib.headers[:-1]):
        weightsum = sum(lib.colweights)
        if lib.coltypes[j] == QHeaderView.Fixed:
            view.setColumnWidth(j,int(view.width()*(lib.colweights[j]/weightsum)))


def tableKey(e):
    if view.hasFocus():
        if e.key() == Qt.Key_Return:
            click_row(e)
    e.accept()
    QTableView.keyPressEvent(view, e)

def generalkey(e):
    if e.modifiers() == Qt.ControlModifier:
        if e.key() == Qt.Key_L:
            sbar.setFocus(True)
        elif e.key() == Qt.Key_S:
            sbar2.setFocus(True)
        elif e.key() == Qt.Key_P:
            libpicker.showPopup()
    QWidget.keyPressEvent(qw, e)

def hide_id():
    pass
    view.setColumnHidden(len(lib.names), True)

def sort_cols(cols):
    masterorder = ["author", "title", "doi", "ref"]
    newcols = []
    for c in masterorder:
        if c == "year":
            break
        if c in cols:
            newcols.append(c)
    if "year" in cols:
        newcols.append("year")
    for b in cols:
        if b not in masterorder and b != "year":
            if "year" in cols:
                newcols.insert(-1,b)
            else:
                newcols.append(b)
    return newcols

def colpicker_change():
    model.beginResetModel()
    view.setColumnHidden(len(lib.names), False)
    currlib = libpicker.currentText()
    newkeys = [lib.keys[a.row()] for a in colpicker.selectedIndexes()]
    newkeys.insert(1,"title")
    newkeys = sort_cols(newkeys)
    lib.headers = newkeys.copy()
    lib.headers.append("id")
    lib.names = newkeys
    coltyp = newkeys.copy()
    for i,key in enumerate(newkeys):
        if key == "title":
            coltyp[i] = QHeaderView.Stretch
        elif key == "year":
            coltyp[i] = QHeaderView.ResizeToContents
        else:
            coltyp[i] = QHeaderView.Fixed
    lib.coltypes = coltyp
    colw = newkeys.copy()
    for i,key in enumerate(newkeys):
        if key == "title":
            colw[i] = 4
        elif key == "author":
            colw[i] = 2
        else:
            colw[i] = 1
    lib.colweights = colw
    #lib.colweights = [1]*len(newkeys)
    lib.load_docs(currlib)
    model.endResetModel()
    for j, h in enumerate(lib.headers[:-1]):
        view.horizontalHeader().setSectionResizeMode(j, lib.coltypes[j])
    #view.reset()
    #view.setColumnHidden(len(lib.names), True)
    #print(view.isColumnHidden(len(lib.names)))
    hide_id()
    n = filtermodel.rowCount()
    statusbar.showMessage(f"Row Count: {n}")

def setup_tableview():
    view.setSelectionBehavior(QAbstractItemView.SelectRows)
    view.setModel(filtermodel)
    view.verticalHeader().setSectionResizeMode(QHeaderView.Fixed)

    for j, h in enumerate(lib.headers[:-1]):
        view.horizontalHeader().setSectionResizeMode(j, lib.coltypes[j])
    view.resizeEvent = lambda _: view.setColumnWidth(0,int(view.width()/4.0))
    #view.horizontalHeader().setSectionResizeMode(QHeaderView.Fixed)
    view.verticalHeader().setVisible(False)
    view.setColumnHidden(len(lib.names), True)
    view.setContextMenuPolicy(Qt.CustomContextMenu)
    view.customContextMenuRequested.connect(open_menu)
    view.mouseDoubleClickEvent = click_row
    view.keyPressEvent = tableKey

def setup_models():
    global interfiltermodel
    global filtermodel
    global model
    global view

    model = TableModel()
    interfiltermodel = FilMo(None)
    interfiltermodel.setSourceModel(model)
    interfiltermodel.setFilterFixedString("")
    #interfiltermodel.setFilterCaseSensitivity(Qt.CaseSensitivity.CaseInsensitive)
    filtermodel = FilMo2(None)
    filtermodel.setSourceModel(interfiltermodel)
    filtermodel.setFilterFixedString("")
    #mainlayout.addWidget(view)


#mainlayout = QVBoxLayout()
mainlayout = QGridLayout()
gridgroupbox = QGroupBox()
gridlayout = QGridLayout()

view = QTableView()


sbar = QLineEdit()
sbar2 = QLineEdit()
sbar.setPlaceholderText("Search Metadata")
sbar2.setPlaceholderText("Search In")
sbar.keyPressEvent = onkey
sbar2.keyPressEvent = onkey2

libpicker = QComboBox()
libpicker.addItems(p.get_libraries())
libpicker.setCurrentText(p.get_lib_name())
libpicker.currentTextChanged.connect(onlibchange)

colpicker = QListWidget()
colpicker.addItems(lib.keys)
colpicker.setSelectionMode(QAbstractItemView.MultiSelection)
colpicker.setRowHidden(lib.keys.index("title"), True)
colpicker.setRowHidden(lib.keys.index("full_text"), True)
for h in lib.names:
    colpicker.item(lib.keys.index(h)).setSelected(True)
colpicker.itemSelectionChanged.connect(colpicker_change)
colpicker.setFixedHeight(100)

gridlayout.addWidget(libpicker)
gridlayout.addWidget(sbar)
gridlayout.addWidget(sbar2)
gridlayout.addWidget(colpicker,0,1,0,2)
gridgroupbox.setLayout(gridlayout)
mainlayout.addWidget(gridgroupbox)
#filtermodel = QSortFilterProxyModel()

setup_models()
setup_tableview()
mainlayout.addWidget(view)

statusbar = QStatusBar()
n = filtermodel.rowCount()
statusbar.showMessage(f"Row Count: {n}")
mainlayout.addWidget(statusbar)


qw = QWidget()
qw.setLayout(mainlayout)
qw.resizeEvent = onresize
qw.keyPressEvent = generalkey
qw.resize(1000,600)
qw.show()
sbar.setFocus()
app.exec_()
